template <typename dt0>
C10_LAUNCH_BOUNDS_1(1024)
__global__ void im2col_kernel(
    const int64_t n1,
    const dt0* data_im2,
    const int64_t height3,
    const int64_t width4,
    const int64_t kernel_height5,
    const int64_t kernel_width6,
    const int64_t pad_height7,
    const int64_t pad_width8,
    const int64_t stride_height9,
    const int64_t stride_width10,
    const int64_t dilation_height11,
    const int64_t dilation_width12,
    const int64_t height_col13,
    const int64_t width_col14,
    dt0* data_col15) {
    int64_t _i_n_d_e_x16 = blockIdx.x * blockDim.x + threadIdx.x;
    for (int index = _i_n_d_e_x16; _i_n_d_e_x16 < (n1); _i_n_d_e_x16 += blockDim.x * gridDim.x , index = _i_n_d_e_x16) {
        int64_t w_out17 = index % width_col14;
        int idx18 = index / width_col14;
        int64_t h_out19 = idx18 % height_col13;
        int64_t channel_in20 = idx18 / height_col13;
        int64_t channel_out21 = channel_in20 * kernel_height5 * kernel_width6;
        int64_t h_in22 = h_out19 * stride_height9 - pad_height7;
        int64_t w_in23 = w_out17 * stride_width10 - pad_width8;
        dt0 *block_col24 = data_col15 + (channel_out21 * height_col13 + h_out19) * width_col14 + w_out17;
        const dt0 *block_im25 = data_im2 + (channel_in20 * height3 + h_in22) * width4 + w_in23;
        for (int64_t i = 0; i < kernel_height5; ++i) {
            for (int64_t j = 0; j < kernel_width6; ++j) {
                int64_t h26 = h_in22 + i * dilation_height11;
                int64_t w27 = w_in23 + j * dilation_width12;
                * block_col24 = (h26 >= 0 && w27 >= 0 && h26 < height3 && w27 < width4) ? block_im25[i * dilation_height11 * width4 + j * dilation_width12] : ScalarConvert<int, dt0>::to(0);
                block_col24 += height_col13 * width_col14;
            }
        }
    }
}


