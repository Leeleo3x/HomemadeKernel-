#define CUDA_KERNEL_LOOP(i, n) \
  for (int i = blockIdx.x * blockDim.x + threadIdx.x; \
       i < (n); \
       i += blockDim.x * gridDim.x)


template <typename scalar_t28, typename accscalar_t29>
C10_LAUNCH_BOUNDS_1(1024)
__global__ void upsample_bilinear2d_out_frame(
    const int ns30,
    const accscalar_t29 rheight31,
    const accscalar_t29 rwidth32,
    const bool align_corners33,
    const PackedTensorAccessor<scalar_t28, 4> idata34,
    PackedTensorAccessor<scalar_t28, 4> odata35) {
    const int batchsize36 = idata34.size(0);
    const int channels37 = idata34.size(1);
    const int height138 = idata34.size(2);
    const int width139 = idata34.size(3);
    const int height240 = odata35.size(2);
    const int width241 = odata35.size(3);
    for (int index = blockIdx.x * blockDim.x + threadIdx.x; index < (ns30); index += blockDim.x * gridDim.x) {
        const int w242 = index % width241;
        const int h243 = index / width241;
        if (height138 == height240 && width139 == width241) {
            const int h154 = h243;
            const int w155 = w242;
            for (int n = 0; n < batchsize36; n++) {
                for (int c = 0; c < channels37; ++c) {
                    const scalar_t28 val56 = idata34[n][c][h154][w155];
                    odata35[n][c][h243][w242] = val56;
                }
            }
            return;
        }
        const accscalar_t29 h1r44 = area_pixel_compute_source_index<accscalar_t29>(rheight31, h243, align_corners33, false);
        const int h145 = h1r44;
        const int h1p46 = (h145 < height138 - 1) ? 1 : 0;
        const accscalar_t29 h1lambda47 = h1r44 - h145;
        const accscalar_t29 h0lambda48 = static_cast<accscalar_t29>(1) - h1lambda47;
        const accscalar_t29 w1r49 = area_pixel_compute_source_index<accscalar_t29>(rwidth32, w242, align_corners33, false);
        const int w150 = w1r49;
        const int w1p51 = (w150 < width139 - 1) ? 1 : 0;
        const accscalar_t29 w1lambda52 = w1r49 - w150;
        const accscalar_t29 w0lambda53 = static_cast<accscalar_t29>(1) - w1lambda52;
        for (int n = 0; n < batchsize36; n++) {
            for (int c = 0; c < channels37; ++c) {
                const accscalar_t29 val57 = h0lambda48 * (w0lambda53 * idata34[n][c][h145][w150] + w1lambda52 * idata34[n][c][h145][w150 + w1p51]) + h1lambda47 * (w0lambda53 * idata34[n][c][h145 + h1p46][w150] + w1lambda52 * idata34[n][c][h145 + h1p46][w150 + w1p51]);
                odata35[n][c][h243][w242] = static_cast<scalar_t28>(val57);
            }
        }
    }
}



