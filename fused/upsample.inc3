#define CUDA_KERNEL_LOOP(i, n) \
  for (int i = blockIdx.x * blockDim.x + threadIdx.x; \
       i < (n); \
       i += blockDim.x * gridDim.x)


template <typename scalar_t29, typename accscalar_t30>
C10_LAUNCH_BOUNDS_1(1024)
__global__ void upsample_bilinear2d_out_frame(
    const int ns31,
    const accscalar_t30 rheight32,
    const accscalar_t30 rwidth33,
    const bool align_corners34,
    const PackedTensorAccessor<scalar_t29, 4> idata35,
    PackedTensorAccessor<scalar_t29, 4> odata36) {
    const int batchsize37 = idata35.size(0);
    const int channels38 = idata35.size(1);
    const int height139 = idata35.size(2);
    const int width140 = idata35.size(3);
    const int height241 = odata36.size(2);
    const int width242 = odata36.size(3);
    for (int index = blockIdx.x * blockDim.x + threadIdx.x; index < (ns31); index += blockDim.x * gridDim.x) {
        const int w243 = index % width242;
        const int h244 = index / width242;
        if (height139 == height241 && width140 == width242) {
            const int h155 = h244;
            const int w156 = w243;
            for (int n = 0; n < batchsize37; n++) {
                for (int c = 0; c < channels38; ++c) {
                    const scalar_t29 val57 = idata35[n][c][h155][w156];
                    odata36[n][c][h244][w243] = val57;
                }
            }
            return;
        }
        const accscalar_t30 h1r45 = area_pixel_compute_source_index<accscalar_t30>(rheight32, h244, align_corners34, false);
        const int h146 = h1r45;
        const int h1p47 = (h146 < height139 - 1) ? 1 : 0;
        const accscalar_t30 h1lambda48 = h1r45 - h146;
        const accscalar_t30 h0lambda49 = static_cast<accscalar_t30>(1) - h1lambda48;
        const accscalar_t30 w1r50 = area_pixel_compute_source_index<accscalar_t30>(rwidth33, w243, align_corners34, false);
        const int w151 = w1r50;
        const int w1p52 = (w151 < width140 - 1) ? 1 : 0;
        const accscalar_t30 w1lambda53 = w1r50 - w151;
        const accscalar_t30 w0lambda54 = static_cast<accscalar_t30>(1) - w1lambda53;
        for (int n = 0; n < batchsize37; n++) {
            for (int c = 0; c < channels38; ++c) {
                const accscalar_t30 val58 = h0lambda49 * (w0lambda54 * idata35[n][c][h146][w151] + w1lambda53 * idata35[n][c][h146][w151 + w1p52]) + h1lambda48 * (w0lambda54 * idata35[n][c][h146 + h1p47][w151] + w1lambda53 * idata35[n][c][h146 + h1p47][w151 + w1p52]);
                odata36[n][c][h244][w243] = static_cast<scalar_t29>(val58);
            }
        }
    }
}



